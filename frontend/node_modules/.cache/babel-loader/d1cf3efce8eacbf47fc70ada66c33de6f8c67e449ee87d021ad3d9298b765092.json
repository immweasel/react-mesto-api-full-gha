{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    //  this._headers = options.headers;\n    //  this._authorization = options.headers.authorization\n  }\n\n  // Приватный метод для проверки ответа сервера\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse);\n  }\n\n  // Получение информации о пользователе\n  getUserInfo() {\n    return this._request(`${this._baseUrl}/users/me`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        // authorization: this._authorization\n      }\n    });\n  }\n\n  // Редактирование информации о пользователе\n  setUserInfo(data) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify({\n        name: data.username,\n        about: data.job\n      })\n    });\n  }\n\n  // Изменение аватара пользователя\n  updateUserAvatar(data) {\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    });\n  }\n\n  // Получение списка карточек\n  getInitialCards() {\n    return this._request(`${this._baseUrl}/cards`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n  }\n\n  // Добавление новой карточки\n  addCard(cardInfo) {\n    return this._request(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify({\n        name: cardInfo.name,\n        link: cardInfo.link\n      })\n    });\n  }\n\n  // Удаление карточки\n  deleteCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n  }\n\n  // return this._request(`${this._baseUrl}/cards/${cardId}`\n\n  // Поставить лайк карточке\n  likeCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n  }\n\n  // Убрать лайк с карточки\n  unlikeCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n      }\n    });\n  }\n}\nconst api = new Api({\n  baseUrl: 'http://localhost:3000'\n  // 'https://mesto.nomoreparties.co/v1/cohort-69',\n  // headers: {\n  //   authorization: '1a325d4c-959b-42a2-8e6f-2cd070905828',\n  //   'Content-Type': 'application/json'\n  // }\n});\n\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_checkResponse","res","ok","json","Promise","reject","status","_request","url","fetch","then","getUserInfo","headers","Authorization","localStorage","getItem","setUserInfo","data","method","body","JSON","stringify","name","username","about","job","updateUserAvatar","avatar","getInitialCards","addCard","cardInfo","link","deleteCard","cardId","likeCard","unlikeCard","api"],"sources":["C:/Users/Kira/Desktop/вёрстка/ЯП/dev/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    //  this._headers = options.headers;\n    //  this._authorization = options.headers.authorization\n  }\n\n  // Приватный метод для проверки ответа сервера\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse);\n  }\n\n  // Получение информации о пользователе\n  getUserInfo() {\n    return this._request(`${this._baseUrl}/users/me`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        // authorization: this._authorization\n      },\n    });\n  }\n\n  // Редактирование информации о пользователе\n  setUserInfo(data) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify({\n        name: data.username,\n        about: data.job,\n      }),\n    });\n  }\n\n  // Изменение аватара пользователя\n  updateUserAvatar(data) {\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    });\n  }\n\n  // Получение списка карточек\n  getInitialCards() {\n    return this._request(`${this._baseUrl}/cards`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n    });\n  }\n\n  // Добавление новой карточки\n  addCard(cardInfo) {\n    return this._request(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify({\n        name: cardInfo.name,\n        link: cardInfo.link,\n      }),\n    });\n  }\n\n  // Удаление карточки\n  deleteCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n    });\n  }\n\n  // return this._request(`${this._baseUrl}/cards/${cardId}`\n\n  // Поставить лайк карточке\n  likeCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n    });\n  }\n\n  // Убрать лайк с карточки\n  unlikeCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n    });\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n  // 'https://mesto.nomoreparties.co/v1/cohort-69',\n  // headers: {\n  //   authorization: '1a325d4c-959b-42a2-8e6f-2cd070905828',\n  //   'Content-Type': 'application/json'\n  // }\n});\n\nexport default api;\n\n"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,QAAQ,GAAGD,OAAO,CAACE,OAAO;IAC/B;IACA;EACF;;EAEA;EACAC,cAAcA,CAACC,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB,CAAC,MAAM;MACL,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;IAChD;EACF;EAEAC,QAAQA,CAACC,GAAG,EAAEX,OAAO,EAAE;IACrB,OAAOY,KAAK,CAACD,GAAG,EAAEX,OAAO,CAAC,CAACa,IAAI,CAAC,IAAI,CAACV,cAAc,CAAC;EACtD;;EAEA;EACAW,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACJ,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,WAAU,EAAE;MAChDc,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;QACvD;MACF;IACF,CAAC,CAAC;EACJ;;EAEA;EACAC,WAAWA,CAACC,IAAI,EAAE;IAChB,OAAO,IAAI,CAACV,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,WAAU,EAAE;MAChDoB,MAAM,EAAE,OAAO;MACfN,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MACzD,CAAC;MACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEL,IAAI,CAACM,QAAQ;QACnBC,KAAK,EAAEP,IAAI,CAACQ;MACd,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;EACAC,gBAAgBA,CAACT,IAAI,EAAE;IACrB,OAAO,IAAI,CAACV,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,kBAAiB,EAAE;MACvDoB,MAAM,EAAE,OAAO;MACfN,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MACzD,CAAC;MACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBM,MAAM,EAAEV,IAAI,CAACU;MACf,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;EACAC,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACrB,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,QAAO,EAAE;MAC7Cc,OAAO,EAAE;QACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MACzD;IACF,CAAC,CAAC;EACJ;;EAEA;EACAc,OAAOA,CAACC,QAAQ,EAAE;IAChB,OAAO,IAAI,CAACvB,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,QAAO,EAAE;MAC7CoB,MAAM,EAAE,MAAM;MACdN,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MACzD,CAAC;MACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEQ,QAAQ,CAACR,IAAI;QACnBS,IAAI,EAAED,QAAQ,CAACC;MACjB,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;EACAC,UAAUA,CAACC,MAAM,EAAE;IACjB,OAAO,IAAI,CAAC1B,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,UAASmC,MAAO,EAAC,EAAE;MACvDf,MAAM,EAAE,QAAQ;MAChBN,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MAAE;IACtE,CAAC,CAAC;EACJ;;EAEA;;EAEA;EACAmB,QAAQA,CAACD,MAAM,EAAE;IACf,OAAO,IAAI,CAAC1B,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,UAASmC,MAAO,QAAO,EAAE;MAC7Df,MAAM,EAAE,KAAK;MACbN,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MAAE;IACtE,CAAC,CAAC;EACJ;;EAEA;EACAoB,UAAUA,CAACF,MAAM,EAAE;IACjB,OAAO,IAAI,CAAC1B,QAAQ,CAAE,GAAE,IAAI,CAACT,QAAS,UAASmC,MAAO,QAAO,EAAE;MAC7Df,MAAM,EAAE,QAAQ;MAChBN,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MAAE;IACtE,CAAC,CAAC;EACJ;AACF;AAEA,MAAMqB,GAAG,GAAG,IAAIzC,GAAG,CAAC;EAClBI,OAAO,EAAE;EACT;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,eAAeqC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}